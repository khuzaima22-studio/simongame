// Array of colors for the game
const colors = ["green", "red", "yellow", "blue"];
let gameSequence = []; // Holds the sequence generated by the game
let playerSequence = []; // Holds the player's input sequence
let level = 0; // Tracks the current level
let score = 0; // Initialize score

// Select the status text, start button, and all game buttons
const status = document.getElementById("status");
const startButton = document.getElementById("start");
const buttons = document.querySelectorAll(".button");
const instructions = document.querySelector(".instructions");
const simonContainer = document.querySelector(".simon-container");

// Event listener for the start button
startButton.addEventListener("click", startGame);

// Add event listeners to the game buttons
buttons.forEach(button => {
  button.addEventListener("click", (e) => handlePlayerInput(e.target.id));
});

/**
 * Starts the game by resetting all variables and beginning the first level.
 */
function startGame() {
  // Hide instructions and show game elements
  instructions.style.display = "none";
  startButton.style.display = "none";

  simonContainer.style.display = "grid";
 
  gameSequence = [];
  playerSequence = [];
  level = 0;
  status.textContent = "Game started! Watch the sequence.";
  nextLevel();
}

function updateScore() {
    const scoreElement = document.getElementById("score");
    scoreElement.textContent = "Score: " + score;
}

/**
 * Progresses to the next level by adding a new random color to the game sequence.
 */
function nextLevel() {
  level++;
  playerSequence = []; // Reset player's sequence for the new level
 
  status.textContent = "Level " + level;
  const randomColor = colors[Math.floor(Math.random() * colors.length)];
  gameSequence.push(randomColor); // Add a new color to the sequence
  playSequence();
}

/**
 * Plays the current sequence by flashing each button in order.
 */
function playSequence() {
  let i = 0;
  const interval = setInterval(() => {
    const color = gameSequence[i];
    flashButton(color); // Flash the button for the current color
    i++;
    if (i >= gameSequence.length) {
      clearInterval(interval); // Stop once the sequence is complete
    }
  }, 800);
}

/**
 * Flashes a button by temporarily changing its opacity.
 * @param {string} color - The color of the button to flash.
 */
function flashButton(color) {
  const button = document.getElementById(color);
  button.style.opacity = "1"; // Brighten the button
  setTimeout(() => button.style.opacity = "0.8", 400); // Dim it after 400ms
}

/**
 * Handles the player's input by checking if the current button matches
 * the game sequence.
 * @param {string} color - The color of the button the player clicked.
 */
function handlePlayerInput(color) {
  playerSequence.push(color); // Add the player's input to their sequence
  flashButton(color); // Flash the button to provide visual feedback

  const currentMoveIndex = playerSequence.length - 1;
  // Check if the player's input matches the game sequence so far
  if (playerSequence[currentMoveIndex] !== gameSequence[currentMoveIndex]) {
    status.textContent = "Game Over! Press Start to try again.";
    return;
  }

  // If the player completes the current sequence, move to the next level
  if (playerSequence.length === gameSequence.length) {
    score += 10; // Increment score by 10 for each level passed
    updateScore(); // Update the score display
    setTimeout(nextLevel, 1000); // Delay before the next sequence starts
  }
}